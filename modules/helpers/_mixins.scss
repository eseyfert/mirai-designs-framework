@use "sass:list";
@use '@miraidesigns/utils';

@mixin margin($margin: 0 0 0 0) {
	@if (list.length($margin) == 1) {
		margin: utils.px2rem(list.nth($margin, 1));
	} @else if (list.length($margin) == 2) {
		margin: utils.px2rem(list.nth($margin, 1)) utils.px2rem(list.nth($margin, 2));
	} @else if (list.length($margin) == 3) {
		margin: utils.px2rem(list.nth($margin, 1))
			utils.px2rem(list.nth($margin, 2))
			utils.px2rem(list.nth($margin, 3));
	} @else if (list.length($margin) == 4) {
		margin: utils.px2rem(list.nth($margin, 1))
			utils.px2rem(list.nth($margin, 2))
			utils.px2rem(list.nth($margin, 3))
			utils.px2rem(list.nth($margin, 4));
	}
}

@mixin padding($padding: 0 0 0 0) {
	@if (list.length($padding) == 1) {
		padding: utils.px2rem(list.nth($padding, 1));
	} @else if (list.length($padding) == 2) {
		padding: utils.px2rem(list.nth($padding, 1)) utils.px2rem(list.nth($padding, 2));
	} @else if (list.length($padding) == 3) {
		padding: utils.px2rem(list.nth($padding, 1))
			utils.px2rem(list.nth($padding, 2))
			utils.px2rem(list.nth($padding, 3));
	} @else if (list.length($padding) == 4) {
		padding: utils.px2rem(list.nth($padding, 1))
			utils.px2rem(list.nth($padding, 2))
			utils.px2rem(list.nth($padding, 3))
			utils.px2rem(list.nth($padding, 4));
	}
}

@mixin margin-padding-reset() {
	margin: 0;
	padding: 0;
}

@mixin border-outline-reset() {
	border: 0;
	outline: 0;
}

@mixin clearfix() {
	&::after {
		content: '';
		clear: both;
		display: table;
	}
}

@mixin offscreen() {
	clip: rect(1px 1px 1px 1px);
	clip: rect(1px, 1px, 1px, 1px);
	position: absolute !important;
	height: 1px !important;
	width: 1px !important;
	padding: 0 !important;
	overflow: hidden !important;
	border: 0 !important;
}
