@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use './variables';
@use './functions';

/**
 * Material Design: Animation
 * @see: https://github.com/material-components/material-components-web/blob/master/packages/mdc-animation
 */
@mixin animation-enter($name, $duration, $delay: 0ms) {
    transition: functions.animation-enter($name, $duration, $delay);
}

@mixin animation-exit-permanent($name, $duration, $delay: 0ms) {
	transition: functions.animation-exit-permanent($name, $duration, $delay);
}

@mixin animation-exit-temporary($name, $duration, $delay: 0ms) {
	transition: functions.animation-exit-temporary($name, $duration, $delay);
}

@mixin animation-standard($name, $duration, $delay: 0ms) {
	transition: functions.animation-standard($name, $duration, $delay);
}

@mixin animation-linear($name, $duration, $delay: 0ms) {
	transition: functions.animation-linear($name, $duration, $delay);
}

/**
 * Material Design: Elevation
 * @see: https://github.com/material-components/material-components-web/blob/master/packages/mdc-elevation
 */
@mixin elevation($z-value: 0, $opacity-boost: 0) {
	@if meta.type-of($z-value) != number or not math.is-unitless($z-value) {
		@error "$z-value must be a unitless number, but received '#{$z-value}'";
	}

	@if $z-value < 0 or $z-value > 24 {
		@error "$z-value must be between 0 and 24, but received '#{$z-value}'";
	}

	$umbra-z-value: map.get(variables.$umbra-map, $z-value);
	$penumbra-z-value: map.get(variables.$penumbra-map, $z-value);
	$ambient-z-value: map.get(variables.$ambient-map, $z-value);

	$umbra-color: rgba(0, 0, 0, variables.$umbra-opacity + $opacity-boost);
	$penumbra-color: rgba(0, 0, 0, variables.$penumbra-opacity + $opacity-boost);
	$ambient-color: rgba(0, 0, 0, variables.$ambient-opacity + $opacity-boost);

	box-shadow: #{'#{$umbra-z-value} #{$umbra-color}'}, #{'#{$penumbra-z-value} #{$penumbra-color}'},
		#{$ambient-z-value} $ambient-color;
}
