@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use './variables';

/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
@function luminance($color) {
	$red: list.nth(variables.$linear-channel-values, color.red($color) + 1);
	$green: list.nth(variables.$linear-channel-values, color.green($color) + 1);
	$blue: list.nth(variables.$linear-channel-values, color.blue($color) + 1);

	@return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
@function contrast($back, $front) {
	$backLum: luminance($back) + 0.05;
	$foreLum: luminance($front) + 0.05;

	@return math.div(math.max($backLum, $foreLum), math.min($backLum, $foreLum));
}

/**
 * Determine whether to use dark or light text on top of a given color.
 * Returns black for dark text and white for light text.
 */
@function color-contrast($color) {
	$lightContrast: contrast($color, white);
	$darkContrast: contrast($color, black);

	@if ($lightContrast > $darkContrast) {
		@return #fff;
	} @else {
		@return #000;
	}
}

@function color($key) {
	@return map.get(variables.$colors, $key);
}

@function color-alpha($key) {
	@return map.get(variables.$colors-alpha, $key);
}

@function color-contrasted($key) {
	@return rgba(color-contrast(color($key)), color-alpha($key));
}

@function brand() {
	@return map.get(variables.$colors, variables.$brand);
}

@function complementary() {
	@return map.get(variables.$colors, variables.$complementary);
}

@function prop($key, $theme: variables.$theme) {
	@return map.get(variables.$themes, $theme, $key);
}
