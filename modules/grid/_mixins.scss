@use 'sass:map';
@use '@miraidesigns/base';
@use '@miraidesigns/fx';
@use '@miraidesigns/utils';
@use './variables';

@mixin base() {
	display: grid;
	grid-template-columns: repeat(
		variables.$cols,
		minmax(utils.px2rem(variables.$cols-min-width), utils.px2rem(variables.$cols-max-width))
	);
	grid-template-rows: repeat(
		variables.$rows,
		minmax(utils.px2rem(variables.$rows-min-height), utils.px2rem(variables.$rows-max-height))
	);
	gap: utils.px2rem(variables.$gap);
}

@mixin masonry {
	grid-template-columns: repeat(
		auto-fill,
		minmax(utils.px2rem(variables.$cols-min-width), utils.px2rem(variables.$cols-max-width))
	);
	grid-auto-rows: utils.px2rem(variables.$masonry-auto-row-height);
}

@mixin modifiers() {
	@for $i from 1 through variables.$classes {
		&--columns-#{$i} {
			grid-template-columns: repeat(
				#{$i},
				minmax(utils.px2rem(variables.$cols-min-width), utils.px2rem(variables.$cols-max-width))
			);
		}

		&--rows-#{$i} {
			grid-template-rows: repeat(
				#{$i},
				minmax(utils.px2rem(variables.$rows-min-height), utils.px2rem(variables.$rows-max-height))
			);
		}
	}

	@each $name, $size in variables.$gaps {
		&--gap-#{$name} {
			gap: utils.px2rem(map.get(variables.$gaps, $name));
		}
	}
}

@mixin styles() {
	.#{base.$prefix}-grid {
		@include base();
		@include modifiers();

		// Change to a masonry style grid.
		&--masonry {
			@include masonry();
		}

		// Fade-in grid item.
		&__item--fade-in {
			animation: fx.animation-enter(item-fade-in, 250ms);
		}
	}

	// Fade-in animation.
	@keyframes item-fade-in {
		from {
			opacity: 0;
			transform: translateY(-#{utils.px2rem(48px)});
		}

		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
}
